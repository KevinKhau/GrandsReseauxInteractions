package tp4_Exploitation;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.HashSet;
import java.util.Set;

import tp1_Introduction.Graph.GraphProvider;
import tp1_Introduction.OrientedGraph;
import tp2_Tarjan.StronglyConnectedComponent;
import tp2_Tarjan.Tarjan;

/**
 * Prend un fichier et effectue divers traitements de graphe avec
 * @author kkhau
 *
 */
public class Factory {
	
	private static Path FOLDER = Paths.get("productions");
	
	Path directory;
	
	Path file;
	OrientedGraph graph;
	Tarjan tarjan;
	
	Factory(Path filePath) {
		this.file = filePath;
	}
	
	public void loadToGraph() {
		String fileName = file.getFileName().toString();
		directory = Paths.get(FOLDER.toString(), toConstCast(fileName));
		String extension = getExtension(fileName); 
		
		switch (extension) {
		case "dat":
			graph = (OrientedGraph) GraphProvider.loadDatFile(file);
			break;
		case "edges":
			graph = (OrientedGraph) GraphProvider.loadEdgesFile(file);
			break;
		default:
			System.out.println("Extension de fichier non reconnue : " + extension);
			break;
		}
		mkdir(directory);
	}
	
	public void outputConnectedComponents() {
		tarjan = new Tarjan(graph);
		int id = 1;
		for (StronglyConnectedComponent c : tarjan.components) {
			if (c.size() > 1) {
				writeFile("component" + id + "_" + c.size() + "-" + graph.getVerticesCount(), (c + "\n").toString().getBytes());
				id++;
			}
		}
	}
	
	public void outputCores() {
		double maxDensity = 0;
		int maxK = 0;
		int k = 0;
		while (true) {
			double nbActiveVertices = (double) graph.getActiveVerticesCount();
			if (nbActiveVertices == 0) {
				return;
			}
			double density = (double) graph.getArcsCount() / nbActiveVertices;
			String s = "k=" + k + ", density=" + density + "\n" + graph.printRaw() + "\n";
			writeFile("core_" + k + "-" + density, s.getBytes());
			
			if (maxDensity < density) {
				maxDensity = density;
				maxK = k;
			}
			k++;
			graph.core(k);
		}
	}
	
	public void writeFile(String fileName, byte[] content) {
		try {
			Files.write(Paths.get(directory.toString(), fileName), content);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public void mkdir(Path dirName) {
		try {
			Files.createDirectories(directory);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Convertit en majuscule, et remplace les . par des _
	 */
	public static String toConstCast(String str) {
		return str.toUpperCase().replace(".", "_");
	}
	
	public static String getExtension(String path) {
		String extension = "";
		int i = path.lastIndexOf('.');
		if (i > 0) {
			extension = path.substring(i + 1);
		}
		return extension;
	}
	
	public static void main(String[] args) {
		
		final String RES_FOLDER = "res";

		Set<String> filenames = new HashSet<>();
//		filenames.add("poules.dat");
		filenames.add("wiki-vote.edges");
		
		long startTime = System.nanoTime();
		
		for (String fn : filenames) {
			Factory factory = new Factory(Paths.get(RES_FOLDER, fn));
			factory.loadToGraph();
			factory.outputConnectedComponents();
//			factory.outputCores(); 
		}

		long endTime = System.nanoTime();
		long duration = (endTime - startTime);
		System.out.println(duration + "ns");
		System.out.println(duration / 1000000 + "ms");
		System.out.println(duration / 1000000000 + "s");
		
	}

}
